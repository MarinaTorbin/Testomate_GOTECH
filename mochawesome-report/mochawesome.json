{
  "stats": {
    "suites": 3,
    "tests": 8,
    "passes": 7,
    "pending": 1,
    "failures": 0,
    "start": "2022-03-09T08:08:01.613Z",
    "end": "2022-03-09T08:08:15.053Z",
    "duration": 13440,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 12.5,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "14aff514-54cf-4b53-a105-7411b6881a85",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e8eee077-048b-4924-85e5-9320e5dded2a",
          "title": "Hybrid tests",
          "fullFile": "C:\\Users\\Marina\\Desktop\\TESTOMATE\\TestProject_CoTech\\src\\tests\\restaurant-hybrid.spec.ts",
          "file": "C:\\Users\\Marina\\Desktop\\TESTOMATE\\TestProject_CoTech\\src\\tests\\restaurant-hybrid.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Start browser in \"Hybrid tests\"",
              "fullTitle": "Hybrid tests \"before all\" hook: Start browser in \"Hybrid tests\"",
              "timedOut": false,
              "duration": 1683,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    browser = new browser_1.Browser();\n                    return [4 /*yield*/, browser.navigateToUrl(baseUiUrl)];\n                case 1:\n                    _a.sent();\n                    return [4 /*yield*/, restaurantsAPI_1.default.resetServer()];\n                case 2:\n                    _a.sent();\n                    page = new restaurant_page_1.RestaurantPage(browser);\n                    okPopUp = new ok_popups_1.OkPopUp(browser);\n                    return [4 /*yield*/, okPopUp.init()];\n                case 3:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "1e6db0b7-313c-444d-a9b3-3d4459a6e5f2",
              "parentUUID": "e8eee077-048b-4924-85e5-9320e5dded2a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Start browser in \"Hybrid tests\"",
              "fullTitle": "Hybrid tests \"before each\" hook: Start browser in \"Hybrid tests\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, browser.navigateToUrl(baseUiUrl)];\n                case 1:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "3c4a169b-b195-4c3d-acb5-eb2ab8c6f769",
              "parentUUID": "e8eee077-048b-4924-85e5-9320e5dded2a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: Quit driver in \"Hybrid tests\"",
              "fullTitle": "Hybrid tests \"after all\" hook: Quit driver in \"Hybrid tests\"",
              "timedOut": false,
              "duration": 603,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, browser.quit()];\n                case 1:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "55762d65-c3c0-448c-ad57-1a5506045785",
              "parentUUID": "e8eee077-048b-4924-85e5-9320e5dded2a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: Close browser in \"Hybrid tests\"",
              "fullTitle": "Hybrid tests \"after each\" hook: Close browser in \"Hybrid tests\"",
              "timedOut": false,
              "duration": 118,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, browser.close()];\n                case 1:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "9466ffc5-aba3-43f0-9a75-54dd3df6d1b9",
              "parentUUID": "e8eee077-048b-4924-85e5-9320e5dded2a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Create&Delete the new Restaurant",
              "fullTitle": "Hybrid tests Create&Delete the new Restaurant",
              "timedOut": false,
              "duration": 5915,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a;\nreturn __awaiter(this, void 0, void 0, function () {\n    var idInputElement, popup, restaurants, defaultAmount, getByIdResponse, getByIdResponseAfterDeletion;\n    return __generator(this, function (_b) {\n        switch (_b.label) {\n            case 0:\n                idInputElement = 123456;\n                return [4 /*yield*/, page.openCreateRestaurantPopup()];\n            case 1:\n                popup = _b.sent();\n                return [4 /*yield*/, restaurantsAPI_1.default.getRestaurants()];\n            case 2:\n                restaurants = _b.sent();\n                defaultAmount = (_a = restaurants.data) === null || _a === void 0 ? void 0 : _a.length;\n                return [4 /*yield*/, Exists(idInputElement)];\n            case 3:\n                if (_b.sent()) {\n                    (0, chai_1.expect)(console.error(\"The restaurant with the same ID is already exists.Test exited\"));\n                    process_1.exit;\n                }\n                return [4 /*yield*/, popup.init()];\n            case 4:\n                _b.sent();\n                return [4 /*yield*/, popup.cleareAllTexs()];\n            case 5:\n                _b.sent();\n                return [4 /*yield*/, popup.fillAllData(idInputElement, \"Name\", \"Adress\", 5)];\n            case 6:\n                _b.sent();\n                return [4 /*yield*/, popup.submitData()];\n            case 7:\n                _b.sent();\n                //this is not a best choice/ We should wait till submit is done or until OK button element is located (conditional wait), but I don't remember how to do this how to do this :)) (or :(()\n                //need to use webdraiverwait API...\n                return [4 /*yield*/, delay(500)];\n            case 8:\n                //this is not a best choice/ We should wait till submit is done or until OK button element is located (conditional wait), but I don't remember how to do this how to do this :)) (or :(()\n                //need to use webdraiverwait API...\n                _b.sent();\n                return [4 /*yield*/, page.clickOk()];\n            case 9:\n                _b.sent();\n                return [4 /*yield*/, restaurantsAPI_1.default.getRestaurantById(idInputElement)];\n            case 10:\n                getByIdResponse = _b.sent();\n                (0, chai_1.expect)(getByIdResponse.status).to.equal(200);\n                (0, chai_1.expect)(getByIdResponse.success).to.be.true;\n                //Act\n                //Since data was reset, the newly added row will be the last        \n                return [4 /*yield*/, page.selectLastDeleteBtnOnList()];\n            case 11:\n                //Act\n                //Since data was reset, the newly added row will be the last        \n                _b.sent();\n                return [4 /*yield*/, delay(500)];\n            case 12:\n                _b.sent(); //not optimal at all        \n                return [4 /*yield*/, page.clickOk()];\n            case 13:\n                _b.sent();\n                return [4 /*yield*/, restaurantsAPI_1.default.getRestaurantById(idInputElement)];\n            case 14:\n                getByIdResponseAfterDeletion = _b.sent();\n                (0, chai_1.expect)(getByIdResponseAfterDeletion.status).to.equal(404);\n                (0, chai_1.expect)(getByIdResponseAfterDeletion.success).to.be.false;\n                return [2 /*return*/];\n        }\n    });\n});",
              "err": {},
              "uuid": "5c072662-0874-483f-9ebe-442957bdcbb2",
              "parentUUID": "e8eee077-048b-4924-85e5-9320e5dded2a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5c072662-0874-483f-9ebe-442957bdcbb2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5915,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "6e312dc0-0e9b-43e3-ad38-ef3a163ad215",
          "title": "UI tests",
          "fullFile": "C:\\Users\\Marina\\Desktop\\TESTOMATE\\TestProject_CoTech\\src\\tests\\restaurant-ui.spec.ts",
          "file": "C:\\Users\\Marina\\Desktop\\TESTOMATE\\TestProject_CoTech\\src\\tests\\restaurant-ui.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate \"Create new Restaurant Popup\" opened",
              "fullTitle": "UI tests Validate \"Create new Restaurant Popup\" opened",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "cdd26ac3-0d45-4ec5-a580-a1a831038efb",
              "parentUUID": "6e312dc0-0e9b-43e3-ad38-ef3a163ad215",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "cdd26ac3-0d45-4ec5-a580-a1a831038efb"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "1099d4f5-732f-41c5-988a-bc9c9870b0c6",
          "title": "Restaurants tests",
          "fullFile": "C:\\Users\\Marina\\Desktop\\TESTOMATE\\TestProject_CoTech\\src\\tests\\restaurant.spec.ts",
          "file": "C:\\Users\\Marina\\Desktop\\TESTOMATE\\TestProject_CoTech\\src\\tests\\restaurant.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Reset restaurant server in \"Restaurants tests\"",
              "fullTitle": "Restaurants tests \"before all\" hook: Reset restaurant server in \"Restaurants tests\"",
              "timedOut": false,
              "duration": 327,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: \n                //Arrange\n                return [4 /*yield*/, restaurantsAPI_1.default.resetServer()];\n                case 1:\n                    //Arrange\n                    _a.sent(); //reset to default values\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "4f7979f6-9975-4b45-81fa-7e94a84c28eb",
              "parentUUID": "1099d4f5-732f-41c5-988a-bc9c9870b0c6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate the amount of restaurants",
              "fullTitle": "Restaurants tests Validate the amount of restaurants",
              "timedOut": false,
              "duration": 362,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var restaurants, actualAmount;\n        var _a;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0: return [4 /*yield*/, restaurantsAPI_1.default.getRestaurants()];\n                case 1:\n                    restaurants = _b.sent();\n                    //Assert\n                    (0, chai_1.expect)(restaurants.success).to.be.true;\n                    actualAmount = (_a = restaurants.data) === null || _a === void 0 ? void 0 : _a.length;\n                    (0, chai_1.expect)(actualAmount).to.equal(3, 'Restaurants amount is not as expected');\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "8ce44ae8-5a18-4530-9b83-0483398ce124",
              "parentUUID": "1099d4f5-732f-41c5-988a-bc9c9870b0c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get restaurant by id",
              "fullTitle": "Restaurants tests Get restaurant by id",
              "timedOut": false,
              "duration": 679,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var myNewRest, createResponse, getByIdResponse;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    myNewRest = { address: \"My Addess 1\", id: 233, name: \"My Restaurant\", score: 2.3 };\n                    return [4 /*yield*/, restaurantsAPI_1.default.createRestaurant(myNewRest)];\n                case 1:\n                    createResponse = _a.sent();\n                    return [4 /*yield*/, restaurantsAPI_1.default.getRestaurantById(233)];\n                case 2:\n                    getByIdResponse = _a.sent();\n                    //Assert\n                    (0, chai_1.expect)(getByIdResponse.status).to.equal(200);\n                    (0, chai_1.expect)(getByIdResponse.success).to.be.true;\n                    (0, chai_1.expect)(getByIdResponse.data).to.deep.equal(myNewRest);\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "035f4f6b-a84f-4028-9248-e4b16cb5ffd0",
              "parentUUID": "1099d4f5-732f-41c5-988a-bc9c9870b0c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get non exsisting restaurant",
              "fullTitle": "Restaurants tests Get non exsisting restaurant",
              "timedOut": false,
              "duration": 352,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var getByIdResponse;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, restaurantsAPI_1.default.getRestaurantById(23367888)];\n                case 1:\n                    getByIdResponse = _a.sent();\n                    //Assert\n                    //expect(getByIdResponse.error).to.equal(\"restaurant with given id not found\");\n                    (0, chai_1.expect)(getByIdResponse.success).to.be.false;\n                    (0, chai_1.expect)(getByIdResponse.status).to.equal(404);\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "ac849c8a-35c7-4612-ae27-62d93069ad96",
              "parentUUID": "1099d4f5-732f-41c5-988a-bc9c9870b0c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add a restorant",
              "fullTitle": "Restaurants tests Add a restorant",
              "timedOut": false,
              "duration": 1027,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var restaurantId, exists, myNewRest, getByIdResponse, getRestaurant;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    restaurantId = 99;\n                    return [4 /*yield*/, IfExists(restaurantId)];\n                case 1:\n                    exists = _a.sent();\n                    if (!!exists) return [3 /*break*/, 4];\n                    myNewRest = { address: \"Marina's Adress\", id: restaurantId, name: \"Marina's Restaurant\", score: 5 };\n                    return [4 /*yield*/, restaurantsAPI_1.default.createRestaurant(myNewRest)];\n                case 2:\n                    getByIdResponse = _a.sent();\n                    (0, chai_1.expect)(getByIdResponse.status).to.equal(201);\n                    (0, chai_1.expect)(getByIdResponse.success).to.be.true;\n                    return [4 /*yield*/, restaurantsAPI_1.default.getRestaurantById(restaurantId)];\n                case 3:\n                    getRestaurant = _a.sent();\n                    (0, chai_1.expect)(getRestaurant.status).to.equal(200);\n                    (0, chai_1.expect)(getRestaurant.success).to.be.true;\n                    (0, chai_1.expect)(getRestaurant.data).to.deep.equal(myNewRest);\n                    return [3 /*break*/, 5];\n                case 4:\n                    //fail test          \n                    (0, chai_1.expect)(console.error(\"The restaurant with the same ID is already exists.Test exited\"));\n                    _a.label = 5;\n                case 5: return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "25f5153b-3713-42be-86d2-eca7a092df23",
              "parentUUID": "1099d4f5-732f-41c5-988a-bc9c9870b0c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete a restaurant",
              "fullTitle": "Restaurants tests Delete a restaurant",
              "timedOut": false,
              "duration": 1006,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var restaurantId, exists, myNewRest, newResaurant, getByIdResponse;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    restaurantId = 999;\n                    return [4 /*yield*/, IfExists(restaurantId)];\n                case 1:\n                    exists = _a.sent();\n                    if (!!exists) return [3 /*break*/, 3];\n                    myNewRest = { address: \"Boo\", id: restaurantId, name: \"Boo Restaurant\", score: 4 };\n                    return [4 /*yield*/, restaurantsAPI_1.default.createRestaurant(myNewRest)];\n                case 2:\n                    newResaurant = _a.sent();\n                    (0, chai_1.expect)(newResaurant.status).to.equal(201);\n                    (0, chai_1.expect)(newResaurant.success).to.be.true;\n                    _a.label = 3;\n                case 3: return [4 /*yield*/, restaurantsAPI_1.default.deleteRestaurant(restaurantId)];\n                case 4:\n                    getByIdResponse = _a.sent();\n                    //Assert\n                    (0, chai_1.expect)(getByIdResponse.status).to.equal(200);\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "5a92d0b5-0f13-4d8f-8504-fcb331c2fd08",
              "parentUUID": "1099d4f5-732f-41c5-988a-bc9c9870b0c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update restaurant's data",
              "fullTitle": "Restaurants tests Update restaurant's data",
              "timedOut": false,
              "duration": 1334,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var restaurantIdBefore, restaurantIdAfter, exists, myNewRest, newResaurant, updateDataRequest, updateResponse, getRestaurant;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    restaurantIdBefore = 9999;\n                    restaurantIdAfter = 10000;\n                    return [4 /*yield*/, IfExists(restaurantIdBefore)];\n                case 1:\n                    exists = _a.sent();\n                    if (!!exists) return [3 /*break*/, 3];\n                    myNewRest = { address: \"Best Choice\", id: restaurantIdBefore, name: \"At best choice street, 100\", score: 4 };\n                    return [4 /*yield*/, restaurantsAPI_1.default.createRestaurant(myNewRest)];\n                case 2:\n                    newResaurant = _a.sent();\n                    (0, chai_1.expect)(newResaurant.status).to.equal(201);\n                    (0, chai_1.expect)(newResaurant.success).to.be.true;\n                    _a.label = 3;\n                case 3:\n                    updateDataRequest = { address: \"Updated Best Choice Adress\", id: restaurantIdAfter, name: \"Updated Name\", score: 5 };\n                    return [4 /*yield*/, restaurantsAPI_1.default.updateRestaurantData(restaurantIdBefore, updateDataRequest)];\n                case 4:\n                    updateResponse = _a.sent();\n                    return [4 /*yield*/, restaurantsAPI_1.default.getRestaurantById(restaurantIdAfter)];\n                case 5:\n                    getRestaurant = _a.sent();\n                    //Assert       \n                    (0, chai_1.expect)(updateResponse.status).to.equal(200);\n                    (0, chai_1.expect)(updateResponse.success).to.be.true;\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "3421179a-b408-47f6-9e79-3ee8db27e547",
              "parentUUID": "1099d4f5-732f-41c5-988a-bc9c9870b0c6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8ce44ae8-5a18-4530-9b83-0483398ce124",
            "035f4f6b-a84f-4028-9248-e4b16cb5ffd0",
            "ac849c8a-35c7-4612-ae27-62d93069ad96",
            "25f5153b-3713-42be-86d2-eca7a092df23",
            "5a92d0b5-0f13-4d8f-8504-fcb331c2fd08",
            "3421179a-b408-47f6-9e79-3ee8db27e547"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4760,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.2"
    },
    "marge": {
      "options": null,
      "version": "6.1.1"
    }
  }
}